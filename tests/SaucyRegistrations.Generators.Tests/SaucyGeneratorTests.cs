namespace SaucyRegistrations.Generators.Tests;

public class SaucyGeneratorTests : BaseTest
{
    [Fact]
    public async Task When_Empty_Should_GenerateBoilerplateOutput()
    {
        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        return services;
                                    }
                                }
                                """;

        await RunGenerator("", expected);
    }

    [Fact]
    public async Task SaucyInclude_When_SingleClass_With_TransientServiceScope_Should_GenerateOutput()
    {
        const string input = """
                             namespace SaucyRegistrations.TestProject;

                             [SaucyInclude(ServiceScope.Transient)]
                             public class TestClass { }
                             """;

        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        services.AddTransient<SaucyRegistrations.TestProject.TestClass>();
                                        return services;
                                    }
                                }
                                """;

        await RunGenerator(input, expected);
    }

    [Fact]
    public async Task SaucyInclude_When_SingleClass_With_ScopedServiceScope_Should_GenerateOutput()
    {
        const string input = """
                             namespace SaucyRegistrations.TestProject;

                             [SaucyInclude(ServiceScope.Scoped)]
                             public class TestClass { }
                             """;

        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        services.AddScoped<SaucyRegistrations.TestProject.TestClass>();
                                        return services;
                                    }
                                }
                                """;

        await RunGenerator(input, expected);
    }

    [Fact]
    public async Task SaucyInclude_When_SingleClass_With_SingletonServiceScope_Should_GenerateOutput()
    {
        const string input = """
                             namespace SaucyRegistrations.TestProject;

                             [SaucyInclude(ServiceScope.Singleton)]
                             public class TestClass { }
                             """;

        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        services.AddSingleton<SaucyRegistrations.TestProject.TestClass>();
                                        return services;
                                    }
                                }
                                """;

        await RunGenerator(input, expected);
    }

    [Fact]
    public async Task SaucyInclude_When_MultipleClasses_With_DifferentServiceScopes_Should_GenerateOutput()
    {
        const string input = """
                             namespace SaucyRegistrations.TestProject;

                             [SaucyInclude(ServiceScope.Transient)]
                             public class TestClass1 { }

                             [SaucyInclude(ServiceScope.Scoped)]
                             public class TestClass2 { }

                             [SaucyInclude(ServiceScope.Singleton)]
                             public class TestClass3 { }
                             """;

        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        services.AddTransient<SaucyRegistrations.TestProject.TestClass1>();
                                        services.AddScoped<SaucyRegistrations.TestProject.TestClass2>();
                                        services.AddSingleton<SaucyRegistrations.TestProject.TestClass3>();
                                        return services;
                                    }
                                }
                                """;

        await RunGenerator(input, expected);
    }

    [Fact]
    public async Task
        SaucyDoNotRegisterWithInterface_When_SingleClass_With_Interface_Should_RegisterClassWithoutInterface()
    {
        const string input = """
                             namespace SaucyRegistrations.TestProject;

                             [SaucyDoNotRegisterWithInterface(nameof(ISomeInterface))]
                             [SaucyInclude(ServiceScope.Singleton)]
                             public class TestClass : ISomeInterface { }

                             public interface ISomeInterface { }
                             """;

        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        services.AddSingleton<SaucyRegistrations.TestProject.TestClass>();
                                        return services;
                                    }
                                }
                                """;

        await RunGenerator(input, expected);
    }

    [Fact]
    public async Task
        SaucyDoNotRegisterWithInterface_When_SingleClass_With_MultipleInterfaces_Should_RegisterClassWithoutInterfaces()
    {
        const string input = """
                             namespace SaucyRegistrations.TestProject;

                             [SaucyDoNotRegisterWithInterface(nameof(ISomeInterface))]
                             [SaucyDoNotRegisterWithInterface(nameof(ISomeOtherInterface))]
                             [SaucyInclude(ServiceScope.Singleton)]
                             public class TestClass : ISomeInterface, ISomeOtherInterface { }

                             public interface ISomeInterface { }
                             public interface ISomeOtherInterface { }
                             """;

        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        services.AddSingleton<SaucyRegistrations.TestProject.TestClass>();
                                        return services;
                                    }
                                }
                                """;

        await RunGenerator(input, expected);
    }

    [Fact]
    public async Task
        SaucyDoNotRegisterWithInterface_When_SingleClass_With_MultipleInterfaces_And_OneInterfaceIsExcluded_And_AnotherIsNot_Should_RegisterClassWithoutExcludedInterface()
    {
        const string input = """
                             namespace SaucyRegistrations.TestProject;

                             [SaucyDoNotRegisterWithInterface(nameof(ISomeOtherInterface))]
                             [SaucyInclude(ServiceScope.Singleton)]
                             public class TestClass : ISomeInterface, ISomeOtherInterface { }

                             public interface ISomeInterface { }
                             public interface ISomeOtherInterface { }
                             """;

        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        services.AddSingleton<SaucyRegistrations.TestProject.ISomeInterface, SaucyRegistrations.TestProject.TestClass>();
                                        return services;
                                    }
                                }
                                """;

        await RunGenerator(input, expected);
    }

    [Fact]
    public async Task SaucyIncludeNamespace_When_NoClassHasServiceScopeOverride_Should_GenerateOutput()
    {
        const string input = """
                             [assembly: SaucyIncludeNamespace(nameof(SaucyRegistrations.TestProject.Repositories), ServiceScope.Transient)]

                             namespace SaucyRegistrations.TestProject.Repositories;

                             public class FirstExampleRepository : IRepository { }

                             public class SecondExampleRepository : IRepository { }

                             public class ThirdExampleRepository : IRepository { }

                             public interface IRepository { }
                             """;

        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        services.AddTransient<SaucyRegistrations.TestProject.Repositories.IRepository, SaucyRegistrations.TestProject.Repositories.FirstExampleRepository>();
                                        services.AddTransient<SaucyRegistrations.TestProject.Repositories.IRepository, SaucyRegistrations.TestProject.Repositories.SecondExampleRepository>();
                                        services.AddTransient<SaucyRegistrations.TestProject.Repositories.IRepository, SaucyRegistrations.TestProject.Repositories.ThirdExampleRepository>();
                                        return services;
                                    }
                                }
                                """;


        await RunGenerator(input, expected);
    }

    [Fact]
    public async Task SaucyIncludeNamespace_When_ClassHasServiceScopeOverride_Should_GenerateOutput()
    {
        const string input = """
                             [assembly: SaucyIncludeNamespace(nameof(SaucyRegistrations.TestProject.Repositories), ServiceScope.Transient)]

                             namespace SaucyRegistrations.TestProject.Repositories;

                             public class FirstExampleRepository : IRepository { }

                             public class SecondExampleRepository : IRepository { }

                             [SaucyInclude(ServiceScope.Scoped)]
                             public class ThirdExampleRepository : IRepository { }

                             public interface IRepository { }
                             """;

        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        services.AddTransient<SaucyRegistrations.TestProject.Repositories.IRepository, SaucyRegistrations.TestProject.Repositories.FirstExampleRepository>();
                                        services.AddTransient<SaucyRegistrations.TestProject.Repositories.IRepository, SaucyRegistrations.TestProject.Repositories.SecondExampleRepository>();
                                        services.AddScoped<SaucyRegistrations.TestProject.Repositories.IRepository, SaucyRegistrations.TestProject.Repositories.ThirdExampleRepository>();
                                        return services;
                                    }
                                }
                                """;

        await RunGenerator(input, expected);
    }

    [Fact]
    public async Task SaucyRegisterAbstractClass_When_AttributeAttachedToConcreteClass_Should_RegisterAbstractClass()
    {
        const string input = """
                             namespace SaucyRegistrations.TestProject;

                             public abstract class AbstractClass { }

                             [SaucyInclude(ServiceScope.Transient)]
                             [SaucyRegisterAbstractClass]
                             public class ConcreteClass : AbstractClass { }
                             """;

        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        services.AddTransient<SaucyRegistrations.TestProject.AbstractClass, SaucyRegistrations.TestProject.ConcreteClass>();
                                        return services;
                                    }
                                }
                                """;

        await RunGenerator(input, expected);
    }

    [Fact]
    public async Task
        SaucyRegisterAbstractClass_When_ConcreteClassImplementingAbstractClass_But_NotMarkedWithSaucyRegisterAbstractClass_Should_NotRegisterAbstractClass()
    {
        const string input = """
                             namespace SaucyRegistrations.TestProject;

                             public abstract class AbstractClass { }

                             [SaucyInclude(ServiceScope.Transient)]
                             public class ConcreteClass : AbstractClass { }
                             """;

        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        services.AddTransient<SaucyRegistrations.TestProject.ConcreteClass>();
                                        return services;
                                    }
                                }
                                """;

        await RunGenerator(input, expected);
    }

    [Fact]
    public async Task SaucyExclude_When_SingleClass_Should_NotGenerateOutput()
    {
        const string input = """
                             namespace SaucyRegistrations.TestProject;

                             [SaucyExclude]
                             public class TestClass { }
                             """;

        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        return services;
                                    }
                                }
                                """;

        await RunGenerator(input, expected);
    }

    [Fact]
    public async Task SaucyExclude_When_MultipleClasses_Should_NotGenerateOutput()
    {
        const string input = """
                             namespace SaucyRegistrations.TestProject;

                             [SaucyExclude]
                             public class TestClass1 { }

                             [SaucyExclude]
                             public class TestClass2 { }

                             [SaucyExclude]
                             public class TestClass3 { }
                             """;

        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        return services;
                                    }
                                }
                                """;

        await RunGenerator(input, expected);
    }

    [Fact]
    public async Task SaucyExclude_When_MultipleClasses_And_OneClassIsExcluded_Should_NotGenerateOutputForExcludedClass()
    {
        const string input = """
                             namespace SaucyRegistrations.TestProject;

                             [SaucyExclude]
                             public class TestClass1 { }

                             [SaucyInclude(ServiceScope.Transient)]
                             public class TestClass2 { }

                             [SaucyInclude(ServiceScope.Transient)]
                             public class TestClass3 { }
                             """;

        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        services.AddTransient<SaucyRegistrations.TestProject.TestClass2>();
                                        services.AddTransient<SaucyRegistrations.TestProject.TestClass3>();
                                        return services;
                                    }
                                }
                                """;

        await RunGenerator(input, expected);
    }
}