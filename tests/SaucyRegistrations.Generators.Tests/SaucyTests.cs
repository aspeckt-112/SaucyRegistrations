using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Testing.Verifiers;

using Xunit;

namespace SaucyRegistrations.Generators.Tests;

using GeneratorTest =
    Microsoft.CodeAnalysis.CSharp.Testing.CSharpSourceGeneratorTest<TestAdapter<SaucyGenerator>, XUnitVerifier>;

public partial class SaucyTests
{
    private const string AttributeSource = """
                                           [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
                                           internal class SaucyInclude : System.Attribute
                                           {
                                               internal SaucyInclude(ServiceScope withScope) { }
                                           }

                                           [System.AttributeUsage(System.AttributeTargets.Assembly, Inherited = false, AllowMultiple = true)]
                                           internal class SaucyIncludeNamespaceWithSuffix : System.Attribute
                                           {
                                               internal SaucyIncludeNamespaceWithSuffix(string suffix, ServiceScope defaultScope) { }
                                           }

                                           [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
                                           internal class SaucyRegisterAbstractClass : System.Attribute
                                           {
                                               internal SaucyRegisterAbstractClass() { }
                                           }

                                           [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = true)]
                                           internal class SaucyDoNotRegisterWithInterface : System.Attribute
                                           {
                                               internal SaucyDoNotRegisterWithInterface(string @interface) { }
                                           }


                                           """;

    private const string EnumSource = """
                                       internal enum ServiceScope
                                       {
                                           Singleton = 0,
                                           Transient = 1,
                                           Scoped = 2
                                       }
                                       """;
    private static async Task RunGenerator(string input, string expectedOutput)
    {
        await new GeneratorTest
        {
            ReferenceAssemblies = ReferenceAssemblies
                .Net
                .Net60
                .AddPackages([
                    new PackageIdentity("Microsoft.Extensions.DependencyInjection", "8.0.0")
                ]),
            TestState =
            {
                Sources = { input },
                GeneratedSources =
                {
                    (typeof(TestAdapter<SaucyGenerator>), "Saucy.Attributes.g.cs", Normalize(AttributeSource)),
                    (typeof(TestAdapter<SaucyGenerator>), "Saucy.Enums.g.cs", Normalize(EnumSource)),
                    (typeof(TestAdapter<SaucyGenerator>), "TestProject.TestProjectServiceCollectionExtensions.g.cs", Normalize(expectedOutput))
                }
            }
        }.RunAsync();
    }

    static string Normalize(string input) => input.Replace("\r\n", "\n");

    [Fact]
    public async Task When_Empty_Should_GenerateBoilerplateOutput()
    {
        const string expected = """
                                // <auto-generated by Saucy. DO NOT CHANGE THIS FILE!!! />
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestProject.ServiceCollectionExtensions;

                                public static class TestProjectServiceCollectionExtensions
                                {
                                    public static IServiceCollection AddTestProjectServices(this IServiceCollection services)
                                    {
                                        return services;
                                    }
                                }
                                """;

        await RunGenerator("", expected);
    }
}